{
	"info": {
		"_postman_id": "36bd08ec-fdba-4e18-ae1e-36f54d2165ee",
		"name": "API Challenges",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "X-challenger",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4b04d231-5bd0-490e-bf1f-e9e51033d177",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"[X-CHALLENGER] is present\", function () {",
							"    pm.response.to.have.header(\"X-CHALLENGER\");",
							"});",
							"",
							"//console.log(pm.response.headers.get(\"X-CHALLENGER\"));",
							"",
							"pm.environment.set(\"X-CHALLENGER\", pm.response.headers.get(\"X-CHALLENGER\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "6e6ee925-dada-40b4-99fc-734def765d85",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"url": "{{baseUrl}}/challenger"
			},
			"response": [
				{
					"id": "ce4acc58-45c0-49da-9305-a609a5b2b91a",
					"name": "X-challenger",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}/challenger"
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Apr 2023 12:50:00 GMT"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Location",
							"value": "/gui/challenges"
						},
						{
							"key": "Content-Type",
							"value": "text/html;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		},
		{
			"name": "Get challenges",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "44cc285f-4a07-4e4f-9096-59e38b8dcd25",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Challenges is in array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.challenges).instanceOf(Array);",
							"});",
							"",
							"pm.test(\"Check challenge have properties -> [name], [description] and [status]\", function () {",
							"    var challengesData = pm.response.json().challenges;",
							"     ",
							"    for(let i=0; i < challengesData.length; i++){",
							"        pm.expect(challengesData[i]).to.have.property(\"name\");",
							"        pm.expect(challengesData[i]).to.have.property(\"description\");",
							"        pm.expect(challengesData[i]).to.have.property(\"status\");",
							"    }",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a8f7a520-d143-41b3-aec2-34cf12606d74",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-CHALLENGER",
						"value": "{{X-CHALLENGER}}",
						"type": "text"
					}
				],
				"url": "{{baseUrl}}/challenges"
			},
			"response": [
				{
					"id": "bd675a18-c5c7-49fe-b268-7396d96f1d15",
					"name": "Get challenges",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/challenges"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Apr 2023 12:52:44 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Location",
							"value": "/gui/challenges"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"challenges\": [\n        {\n            \"name\": \"POST /challenger (201)\",\n            \"description\": \"Issue a POST request on the `/challenger` end point, with no body, to create a new challenger session. Use the generated X-CHALLENGER header in future requests to track challenge completion.\",\n            \"status\": true\n        },\n        {\n            \"name\": \"GET /challenges (200)\",\n            \"description\": \"Issue a GET request on the `/challenges` end point\",\n            \"status\": true\n        },\n        {\n            \"name\": \"GET /todos (200)\",\n            \"description\": \"Issue a GET request on the `/todos` end point\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todo (404) not plural\",\n            \"description\": \"Issue a GET request on the `/todo` end point should 404 because nouns should be plural\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos/{id} (200)\",\n            \"description\": \"Issue a GET request on the `/todos/{id}` end point to return a specific todo\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos/{id} (404)\",\n            \"description\": \"Issue a GET request on the `/todos/{id}` end point for a todo that does not exist\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos (200) ?filter\",\n            \"description\": \"Issue a GET request on the `/todos` end point with a query filter to get only todos which are 'done'. There must exist both 'done' and 'not done' todos, to pass this challenge.\",\n            \"status\": false\n        },\n        {\n            \"name\": \"HEAD /todos (200)\",\n            \"description\": \"Issue a HEAD request on the `/todos` end point\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos (201)\",\n            \"description\": \"Issue a POST request to successfully create a todo\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos (400) doneStatus\",\n            \"description\": \"Issue a POST request to create a todo but fail validation on the `doneStatus` field\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos/{id} (200)\",\n            \"description\": \"Issue a POST request to successfully update a todo\",\n            \"status\": false\n        },\n        {\n            \"name\": \"DELETE /todos/{id} (200)\",\n            \"description\": \"Issue a DELETE request to successfully delete a todo\",\n            \"status\": false\n        },\n        {\n            \"name\": \"DELETE /todos/{id} (200) all\",\n            \"description\": \"Issue a DELETE request to successfully delete the last todo in system so that there are no more todos in the system\",\n            \"status\": false\n        },\n        {\n            \"name\": \"OPTIONS /todos (200)\",\n            \"description\": \"Issue an OPTIONS request on the `/todos` end point. You might want to manually check the 'Allow' header in the response is as expected.\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos (200) XML\",\n            \"description\": \"Issue a GET request on the `/todos` end point with an `Accept` header of `application/xml` to receive results in XML format\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos (200) JSON\",\n            \"description\": \"Issue a GET request on the `/todos` end point with an `Accept` header of `application/json` to receive results in JSON format\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos (200) ANY\",\n            \"description\": \"Issue a GET request on the `/todos` end point with an `Accept` header of `*/*` to receive results in default JSON format\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos (200) XML pref\",\n            \"description\": \"Issue a GET request on the `/todos` end point with an `Accept` header of `application/xml, application/json` to receive results in the preferred XML format\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos (200) no accept\",\n            \"description\": \"Issue a GET request on the `/todos` end point with no `Accept` header present in the message to receive results in default JSON format\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /todos (406)\",\n            \"description\": \"Issue a GET request on the `/todos` end point with an `Accept` header `application/gzip` to receive 406 'NOT ACCEPTABLE' status code\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos XML\",\n            \"description\": \"Issue a POST request on the `/todos` end point to create a todo using Content-Type `application/xml`\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos JSON\",\n            \"description\": \"Issue a POST request on the `/todos` end point to create a todo using Content-Type `application/json`\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos (415)\",\n            \"description\": \"Issue a POST request on the `/todos` end point with an unsupported content type to generate a 415 status code\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos XML to JSON\",\n            \"description\": \"Issue a POST request on the `/todos` end point to create a todo using Content-Type `application/xml` but Accept `application/json`\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /todos JSON to XML\",\n            \"description\": \"Issue a POST request on the `/todos` end point to create a todo using Content-Type `application/json` but Accept `application/xml`\",\n            \"status\": false\n        },\n        {\n            \"name\": \"DELETE /heartbeat (405)\",\n            \"description\": \"Issue a DELETE request on the `/heartbeat` end point and receive 405 (Method Not Allowed)\",\n            \"status\": false\n        },\n        {\n            \"name\": \"PATCH /heartbeat (500)\",\n            \"description\": \"Issue a PATCH request on the `/heartbeat` end point and receive 500 (internal server error)\",\n            \"status\": false\n        },\n        {\n            \"name\": \"TRACE /heartbeat (501)\",\n            \"description\": \"Issue a TRACE request on the `/heartbeat` end point and receive 501 (Not Implemented)\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /heartbeat (204)\",\n            \"description\": \"Issue a GET request on the `/heartbeat` end point and receive 204 when server is running\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /secret/token (401)\",\n            \"description\": \"Issue a POST request on the `/secret/token` end point and receive 401 when Basic auth username/password is not admin/password\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /secret/token (201)\",\n            \"description\": \"Issue a POST request on the `/secret/token` end point and receive 201 when Basic auth username/password is admin/password\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /secret/note (403)\",\n            \"description\": \"Issue a GET request on the `/secret/note` end point and receive 403 when X-AUTH-TOKEN does not match a valid token\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /secret/note (401)\",\n            \"description\": \"Issue a GET request on the `/secret/note` end point and receive 401 when no X-AUTH-TOKEN header present\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /secret/note (403)\",\n            \"description\": \"Issue a POST request on the `/secret/note` end point with a note payload {\\\"note\\\":\\\"my note\\\"} and receive 403 when X-AUTH-TOKEN does not match a valid token\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /secret/note (401)\",\n            \"description\": \"Issue a POST request on the `/secret/note` end point with a note payload {\\\"note\\\":\\\"my note\\\"} and receive 401 when no X-AUTH-TOKEN present\",\n            \"status\": false\n        },\n        {\n            \"name\": \"GET /secret/note (200)\",\n            \"description\": \"Issue a GET request on the `/secret/note` end point receive 200 when valid X-AUTH-TOKEN used - response body should contain the note\",\n            \"status\": false\n        },\n        {\n            \"name\": \"POST /secret/note (200)\",\n            \"description\": \"Issue a POST request on the `/secret/note` end point with a note payload e.g. {\\\"note\\\":\\\"my note\\\"} and receive 200 when valid X-AUTH-TOKEN used. Note is maximum length 100 chars and will be truncated when stored.\",\n            \"status\": false\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get Todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7bb47a-9795-4d0e-b616-28f8cc8c4977",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Todos is in array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.todos).instanceOf(Array);",
							"});",
							"",
							"pm.test(\"Check todo have properties -> [id], [title], [doneStatus] and [description]\", function () {",
							"    var todosData = pm.response.json().todos;",
							"     ",
							"    for(let i=0; i < todosData.length; i++){",
							"        pm.expect(todosData[i]).to.have.property(\"id\");",
							"        pm.expect(todosData[i]).to.have.property(\"title\");",
							"        pm.expect(todosData[i]).to.have.property(\"doneStatus\");",
							"        pm.expect(todosData[i]).to.have.property(\"description\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "1b5bb33c-41ee-478d-ad4b-219149439b1d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/todos"
			},
			"response": [
				{
					"id": "7839a691-73a4-4810-9331-499aa49e4014",
					"name": "Get Todos",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/todos"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Apr 2023 13:16:17 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"todos\": [\n        {\n            \"id\": 1,\n            \"title\": \"scan paperwork\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 4,\n            \"title\": \"escalate late payments\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 5,\n            \"title\": \"pay invoices\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 7,\n            \"title\": \"train staff\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 8,\n            \"title\": \"schedule meeting\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 9,\n            \"title\": \"tidy meeting room\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 10,\n            \"title\": \"install webcam\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 2,\n            \"title\": \"file paperwork\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 3,\n            \"title\": \"process payments\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 6,\n            \"title\": \"process payroll\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Head todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7bb47a-9795-4d0e-b616-28f8cc8c4977",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "beb0cf90-80b4-4f0f-9de3-bbabbc131555",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "HEAD",
				"header": [],
				"url": "{{baseUrl}}/todos"
			},
			"response": [
				{
					"id": "947ce233-b183-4cbb-88aa-6bba8e6edfe1",
					"name": "Head todos",
					"originalRequest": {
						"method": "HEAD",
						"header": [],
						"url": "{{baseUrl}}/todos"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 24 Apr 2023 13:40:33 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		},
		{
			"name": "Get Todos Filter By",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7bb47a-9795-4d0e-b616-28f8cc8c4977",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Todos is in array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.todos).instanceOf(Array);",
							"});",
							"",
							"pm.test(\"Check todo have properties -> [id], [title], [doneStatus] and [description]\", function () {",
							"    var todosData = pm.response.json().todos;",
							"     ",
							"    for(let i=0; i < todosData.length; i++){",
							"        pm.expect(todosData[i]).to.have.property(\"id\");",
							"        pm.expect(todosData[i]).to.have.property(\"title\");",
							"        pm.expect(todosData[i]).to.have.property(\"doneStatus\");",
							"        pm.expect(todosData[i]).to.have.property(\"description\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "5fed24af-e806-453a-b0a2-d24c97f2c6f9",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/todos?doneStatus=true",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"todos"
					],
					"query": [
						{
							"key": "doneStatus",
							"value": "true"
						}
					]
				}
			},
			"response": [
				{
					"id": "4ba84479-6481-4f8b-8163-13cefbcc36fd",
					"name": "Get Todos Filter By doneStatus - true",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos?doneStatus=true",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "doneStatus",
									"value": "true"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 24 Apr 2023 13:41:15 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"todos\": [\n        {\n            \"id\": 12,\n            \"title\": \"Create new folder \",\n            \"doneStatus\": true,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 11,\n            \"title\": \"Create new repo for collection backup\",\n            \"doneStatus\": true,\n            \"description\": \"\"\n        }\n    ]\n}"
				},
				{
					"id": "9258780c-6d28-40d3-8b69-7a68711a2df6",
					"name": "Get Todos Filter By doneStatus - false",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/todos?doneStatus=false",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"todos"
							],
							"query": [
								{
									"key": "doneStatus",
									"value": "false"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Mon, 24 Apr 2023 13:41:52 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"todos\": [\n        {\n            \"id\": 4,\n            \"title\": \"escalate late payments\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 5,\n            \"title\": \"pay invoices\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 7,\n            \"title\": \"train staff\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 1,\n            \"title\": \"scan paperwork\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 8,\n            \"title\": \"schedule meeting\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 9,\n            \"title\": \"tidy meeting room\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 10,\n            \"title\": \"install webcam\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 2,\n            \"title\": \"file paperwork\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 3,\n            \"title\": \"process payments\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        },\n        {\n            \"id\": 6,\n            \"title\": \"process payroll\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get Todos By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7bb47a-9795-4d0e-b616-28f8cc8c4977",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Todos is in array\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.todos).instanceOf(Array);",
							"});",
							"",
							"pm.test(\"Check todo have properties -> [id], [title], [doneStatus] and [description]\", function () {",
							"    var todosData = pm.response.json().todos;",
							"     ",
							"    for(let i=0; i < todosData.length; i++){",
							"        pm.expect(todosData[i]).to.have.property(\"id\");",
							"        pm.expect(todosData[i]).to.have.property(\"title\");",
							"        pm.expect(todosData[i]).to.have.property(\"doneStatus\");",
							"        pm.expect(todosData[i]).to.have.property(\"description\");",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "4dfb3c97-36c7-471a-b252-115aa75cb2ca",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/todos/{{id}}"
			},
			"response": [
				{
					"id": "9c7b34f4-e5ab-49e4-aba7-b33569314637",
					"name": "Get Todos By Id",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/todos/{{id}}"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Apr 2023 17:16:02 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"todos\": [\n        {\n            \"id\": 1,\n            \"title\": \"scan paperwork\",\n            \"doneStatus\": false,\n            \"description\": \"\"\n        }\n    ]\n}"
				}
			]
		},
		{
			"name": "Get Todos By Invalid Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7bb47a-9795-4d0e-b616-28f8cc8c4977",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});",
							"",
							"pm.test(\"Body has property -> [errorMessages]\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.haveOwnProperty(\"errorMessages\");",
							"});",
							"",
							"pm.test(\"Body matches error messages\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"Could not find an instance with todos/\" + pm.environment.get(\"invalid-id\"));",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4661099e-20a1-489c-8062-5450cd31ada5",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "638ced67-4108-4878-a20a-9dbd0511ad5c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "{{baseUrl}}/todos/{{invalid-id}}"
			},
			"response": [
				{
					"id": "002daf38-b1d9-40fb-95eb-bbddbed6bcef",
					"name": "Get Todos By Invalid",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/todos/{{invalid-id}}"
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Apr 2023 17:31:51 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"errorMessages\": [\n        \"Could not find an instance with todos/10912039091203812\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Get todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ec66ef58-7b09-4176-bf6d-4a94c6efd793",
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.response.to.have.status(404);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "855ca379-5dbd-459a-a92f-b3b5c3dbad3b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "X-CHALLENGER",
						"value": "{{X-CHALLENGER}}",
						"type": "text"
					}
				],
				"url": "{{baseUrl}}/todo"
			},
			"response": [
				{
					"id": "4d655e31-8950-4c47-a9b6-97c480e684b1",
					"name": "Get todo",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}/todo"
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "html",
					"header": [
						{
							"key": "Date",
							"value": "Wed, 19 Apr 2023 17:13:31 GMT"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Content-Type",
							"value": "text/html;charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		},
		{
			"name": "Create Todo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbb72ab5-3855-4c01-abc0-c676e04f33df",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check responsen to have properties -> [id], [title], [doneStatus] and [description]\", function () {",
							"",
							"    var response = pm.response.json();",
							"    pm.expect(response).to.have.property(\"id\");",
							"    pm.expect(response).to.have.property(\"title\");",
							"    pm.expect(response).to.have.property(\"doneStatus\");",
							"    pm.expect(response).to.have.property(\"description\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "890278fe-8bc8-403e-b947-dd7ac588f3c4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\" : \"Create new folder \",\n    \"doneStatus\": true,\n    \"description\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/todos"
			},
			"response": [
				{
					"id": "0f23a501-7452-4f70-86cc-9a6ddd079137",
					"name": "Create Todo",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\" : \"Create new repo for collection backup\",\n    \"doneStatus\": true,\n    \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/todos"
					},
					"status": "Created",
					"code": 201,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Thu, 20 Apr 2023 05:25:36 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "Location",
							"value": "todos/11"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"id\": 11,\n    \"title\": \"Create new repo for collection backup\",\n    \"doneStatus\": true,\n    \"description\": \"\"\n}"
				}
			]
		},
		{
			"name": "Create Todo - Invalid doneStatus",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbb72ab5-3855-4c01-abc0-c676e04f33df",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check responsen to have properties -> [id], [title], [doneStatus] and [description]\", function () {",
							"",
							"    var response = pm.response.json();",
							"    pm.expect(response).to.have.property(\"id\");",
							"    pm.expect(response).to.have.property(\"title\");",
							"    pm.expect(response).to.have.property(\"doneStatus\");",
							"    pm.expect(response).to.have.property(\"description\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "8e7b5854-565c-4a75-8cdc-f2361282067f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\" : \"Create new folder \",\n    \"doneStatus\": 3,\n    \"description\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/todos"
			},
			"response": [
				{
					"id": "799ee981-5017-44dc-8c65-9bf0353b3c9e",
					"name": "Create Todo Failed doneStatus Validation",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\" : \"Create new folder \",\n    \"doneStatus\": \"\",\n    \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/todos"
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 May 2023 17:57:22 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"errorMessages\": [\n        \"Failed Validation: doneStatus should be BOOLEAN\"\n    ]\n}"
				}
			]
		},
		{
			"name": "Update todo By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbb72ab5-3855-4c01-abc0-c676e04f33df",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Check responsen to have properties -> [id], [title], [doneStatus] and [description]\", function () {",
							"",
							"    var response = pm.response.json();",
							"    pm.expect(response).to.have.property(\"id\");",
							"    pm.expect(response).to.have.property(\"title\");",
							"    pm.expect(response).to.have.property(\"doneStatus\");",
							"    pm.expect(response).to.have.property(\"description\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "841a7783-bd33-4cb8-8ff1-e41dcb88f0f4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\" : \"Create new folder \",\n    \"doneStatus\": true,\n    \"description\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/todos/{{id}}"
			},
			"response": [
				{
					"id": "fe1ce04e-c654-42ce-b4f0-977777fbf570",
					"name": "Update todo By Id",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"title\" : \"Create new folder \",\n    \"doneStatus\": true,\n    \"description\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/todos/{{id}}"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 May 2023 18:00:57 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "{\n    \"id\": 1,\n    \"title\": \"Create new folder \",\n    \"doneStatus\": true,\n    \"description\": \"\"\n}"
				}
			]
		},
		{
			"name": "Delete todo By Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fbb72ab5-3855-4c01-abc0-c676e04f33df",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "2c86534d-b7a3-4a24-9954-9ed8fd74df40",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{baseUrl}}/todos/{{id}}"
			},
			"response": [
				{
					"id": "b7be7dbd-cbfc-44fd-be66-0ac7cfc49625",
					"name": "Delete todo By Id",
					"originalRequest": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/todos/{{id}}"
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Tue, 02 May 2023 18:02:35 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json"
						},
						{
							"key": "X-CHALLENGER",
							"value": "rest-api-challenges-single-player"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Server",
							"value": "Jetty(9.4.z-SNAPSHOT)"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": null
				}
			]
		}
	]
}